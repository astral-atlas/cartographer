// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Users$AtlasClient2 from "./Users.bs.js";

function createBasicAuthentication(username, password) {
  return /* Basic */[
          username,
          password
        ];
}

function createConnection(auth, domain) {
  return /* record */[
          /* auth */auth,
          /* domain */domain
        ];
}

function toArray(toElement, json) {
  var match = Js_json.classify(json);
  if (typeof match === "number" || match.tag !== 3) {
    return /* Error */Block.__(1, ["JSON was not an Array"]);
  } else {
    return Belt_Array.reduce(match[0], /* Ok */Block.__(0, [/* array */[]]), (function (arraySoFarOrError, currentElement) {
                  if (arraySoFarOrError.tag) {
                    return /* Error */Block.__(1, [arraySoFarOrError[0]]);
                  } else {
                    var match = Curry._1(toElement, currentElement);
                    if (match.tag) {
                      return /* Error */Block.__(1, [match[0]]);
                    } else {
                      return /* Ok */Block.__(0, [Belt_Array.concat(arraySoFarOrError[0], /* array */[match[0]])]);
                    }
                  }
                }));
  }
}

function toUserArray(param) {
  return toArray((function (element) {
                var match = Js_json.classify(element);
                if (typeof match === "number" || match.tag !== 2) {
                  return /* Error */Block.__(1, ["Element was not an object"]);
                } else {
                  return Users$AtlasClient2.toUser(match[0]);
                }
              }), param);
}

function createClient(get, connection, toBase64) {
  var match = connection[/* auth */0];
  var authenticationHeaders = /* array */[/* tuple */[
      "Authorization",
      Curry._1(toBase64, match[0] + (":" + match[1]))
    ]];
  return {
          getUsers: (function (param) {
              var url = connection[/* domain */1] + "/users";
              return Curry._2(get, url, authenticationHeaders).then((function (body) {
                            var json = JSON.parse(body);
                            var match = toUserArray(json);
                            if (match.tag) {
                              return Promise.reject(Js_exn.raiseError(match[0]));
                            } else {
                              return Promise.resolve(match[0]);
                            }
                          }));
            })
        };
}

export {
  createBasicAuthentication ,
  createConnection ,
  toArray ,
  toUserArray ,
  createClient ,
  
}
/* No side effect */
